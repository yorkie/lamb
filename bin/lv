#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var Parser = require('../').Parser;
var util = require('util');
var exec = require('child_process').exec;
var argv = require('minimist')(process.argv.slice(2));
var command = argv._[0];
var DEFAULT_PATH = '/tmp/out';

function usage() {
  fs.createReadStream(path.join(__dirname, './usage.txt'))
    .on('end', process.exit)
    .pipe(process.stdout);
}

if (argv.help || process.argv.slice(2).length === 0) {
  usage();
}

switch (command) {
  case 'run':
    lv_run();
    break;
  case 'compile':
    lv_compile();
    break;
}

function lv_run() {
  lv_compile(function(err, out) {
    var child = exec(out);
    child.stdout.pipe(process.stdout);
    child.stderr.pipe(process.stderr);
  });
}

function lv_compile(callback) {
  var filename = argv._[1];
  var out = argv._[2] || DEFAULT_PATH;
  if (!/\.js$/.test(filename)) {
    filename += '.js';
  }

  var mainparser = new Parser(filename);
  mainparser.on('error', function(err) {
    console.error(err);
  });
  mainparser.on('done', function(program) {
    fs.writeFile(out+'.asm', program, function() {
      var child = exec(util.format('sh %s %s', path.join(__dirname, '../build.sh'), out), function() {
        if (callback && typeof callback === 'function') callback(null, out);
      });
      child.stdout.pipe(process.stdout);
      child.stderr.pipe(process.stderr);
    });
  });
}